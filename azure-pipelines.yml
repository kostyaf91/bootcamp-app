# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- feature/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '783185f1-f3b8-40c5-8d47-f8df1bef5828'
  imageRepository: 'kostyabootcampimage'
  containerRegistry: 'kostyaf91bootcampreg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'latest'


stages:
### Build image to staging ###
- stage: CI_build_image_staging
  variables:
  - group: staging
  displayName: Build and push + .env staging
  pool: 
    name: bootcampApp-pool
    demands:
     - agent.name -equals staging-agent
  jobs:
  - job: Build
    displayName: Build and Push
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sudo apt-get install sshpass'
    - bash: |
        sudo chmod 666 /var/run/docker.sock
        echo "# Host configuration
        PORT=8080
        HOST=0.0.0.0
        #Postgres configuration
        PGHOST=staging-kf-postgres-flex-server.postgres.database.azure.com
        PGUSERNAME=postgres
        PGDATABASE=postgres
        PGPASSWORD=$(staging-postgres-pass)
        PGPORT=5432
              
        HOST_URL=http://$(staging-lb-ip):8080
        COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
        NODE_ENV=development
              
        # Okta configuration
        OKTA_ORG_URL=https://dev-98291338.okta.com
        OKTA_CLIENT_ID=$(staging-okta-id)
        OKTA_CLIENT_SECRET=$(staging-okta-secret)" > ./.env
      displayName: Creating staging .env
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          Staging
### Build image to production ###
- stage: CI_build_image_prod
  variables:
  - group: prod
  displayName: Build and push + .env prod
  pool: 
    name: bootcampApp-pool
    demands:
     - agent.name -equals prod-agent
  jobs:
  - job: Build
    displayName: Build and Push
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'sudo apt-get install sshpass'
    - bash: |
        sudo chmod 666 /var/run/docker.sock
        echo "# Host configuration
        PORT=8080
        HOST=0.0.0.0
        #Postgres configuration
        PGHOST=prod-kf-postgres-flex-server.postgres.database.azure.com
        PGUSERNAME=postgres
        PGDATABASE=postgres
        PGPASSWORD=$(prod-postgres-pass)
        PGPORT=5432
              
        HOST_URL=http://$(prod-lb-ip):8080
        COOKIE_ENCRYPT_PWD=superAwesomePasswordStringThatIsAtLeast32CharactersLong!
        NODE_ENV=development
              
        # Okta configuration
        OKTA_ORG_URL=https://dev-98291338.okta.com
        OKTA_CLIENT_ID=$(prod-okta-id)
        OKTA_CLIENT_SECRET=$(prod-okta-secret)" > ./.env
      displayName: Creating prod .env
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          Prod
### Deploying to staging ###
- stage: Deploy_to_staging
  variables:
  - group: staging
  - group: repo
  displayName: Run Ansible to deploy image
  pool: 
    name: bootcampApp-pool
    demands:
     - agent.name -equals staging-agent
  jobs:
  - job: Ansible
    displayName: Ansible
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "[servers]
          server1 ansible_host=10.0.0.4
          server2 ansible_host=10.0.0.5
          [servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_connection=ssh
          ansible_user=ubuntu
          ansible_ssh_pass=$(staging-vm-pass)
          tag=$(Build.BuildId)
          ansible_ssh_extra_args='-o StrictHostKeyChecking=no'" > $(Build.SourcesDirectory)/ansible/inventory.ini
      displayName: Creating the ini file
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo yes | sudo apt-get install ansible'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ansible-playbook playbook.yml -i inventory.ini --extra-vars "acrLogin=$(acrLogin) acrPass=$(acrPass) env=Staging"
        workingDirectory: $(Build.SourcesDirectory)/ansible/
      displayName: Deploying the staging container
### Deploying to production ###
- stage: Deploy_to_prod
  variables:
  - group: prod
  - group: repo
  displayName: Run Ansible to deploy image
  pool: 
    name: bootcampApp-pool
    demands:
     - agent.name -equals prod-agent
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: bootcampApp-pool
    timeoutInMinutes: 180 # 6 hours
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 90 # 3 hours
      inputs:
        notifyUsers: |
          kostya.devops002@outlook.com
        instructions: 'Please validate the build configuration and resume'
        onTimeout: reject
  - job: Ansible
    displayName: Ansible
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          echo "[servers]
          server1 ansible_host=10.0.0.4
          server2 ansible_host=10.0.0.5
          server3 ansible_host=10.0.0.6
          [servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_connection=ssh
          ansible_user=ubuntu
          ansible_ssh_pass=$(prod-vm-pass)
          tag=$(Build.BuildId)
          ansible_ssh_extra_args='-o StrictHostKeyChecking=no'" > $(Build.SourcesDirectory)/ansible/inventory.ini
      displayName: Creating the ini file
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo yes | sudo apt-get install ansible'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ansible-playbook playbook.yml -i inventory.ini --extra-vars "acrLogin=$(acrLogin) acrPass=$(acrPass) env=Prod"
        workingDirectory: $(Build.SourcesDirectory)/ansible/
      displayName: Deploying the staging container