apiVersion: apps/v1
kind: Deployment
metadata:
  name:  webapp-deploy
  namespace: bootcamp
  labels:
    app:  webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  webapp
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name:  webapp
        image:  kostyaf91bootcampreg.azurecr.io/bootcampapp:latest
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        # livenessProbe:
        #   tcpSocket:
        #     port: 80
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
        # readinessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 80
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 2
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
        # env:
        # - name: DB_HOST
        #   valueFrom:
        #     configMapKeyRef:
        #       name: webapp
        #       key: DB_HOST
        ports:
        - containerPort:  8080
          name:  webapp
      #   volumeMounts:
      #   - name: localtime
      #     mountPath: /etc/localtime
      # volumes:
      #   - name: localtime
      #     hostPath:
      #       path: /usr/share/zoneinfo/Asia/Shanghai
      # restartPolicy: Always
        envFrom:
        - secretRef:
            name: webapp-secret

---

apiVersion: v1
kind: Service
metadata:
  name: web-service
  namespace: bootcamp
spec:
  selector:
    app: webapp
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  ports:
  # - name: webapp
    - protocol: TCP
      port: 8080
      targetPort: 8080
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
    #nodePort: 

---

# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: bootcamp
  annotations:
    kubernetes.io/ingrees.class: "nginx"
spec:
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: web-service
              port:
                number: 8080
